<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Termin-Übersicht (edu-event-wall)</title>
    <style>
        /* Grundlegende Stile und Farbvariablen */
        :root {
            --primary-color: #2a73c2; /* Angepasstes Blau vom Beispiel */
            --secondary-color: #f5a623;
            --background-color: #f4f7f6;
            --font-color: #333;
            --light-gray: #e0e0e0;
            --white: #ffffff;
            --shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            --tile-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--background-color);
            color: var(--font-color);
            margin: 0;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 40px;
        }

        /* Hauptcontainer für die Kachel-Wand */
        #edu-event-wall {
            display: grid;
            /* Responsive Grid: Füllt den Platz mit Kacheln, die min. 320px breit sind */
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 25px;
            max-width: 1600px;
            margin: 0 auto;
        }

        /* Stil für eine einzelne Kachel */
        .event-tile {
            background-color: var(--white);
            border-radius: 8px;
            box-shadow: var(--tile-shadow);
            overflow: hidden; /* Wichtig, damit die runden Ecken das Bild beschneiden */
            cursor: pointer;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            display: flex;
            flex-direction: column;
        }

        .event-tile:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.25);
        }

        /* Oberer Teil der Kachel (Bild + Overlays) */
        .tile-header {
            position: relative;
            height: 200px;
            background-size: cover;
            background-position: center;
            color: var(--white);
        }

        /* Fallback-Grafik, wenn kein Bild vorhanden ist */
        .tile-header.no-image {
             background: linear-gradient(45deg, #4e54c8, #8f94fb);
        }

        /* Datums-Bubble (wie im Beispiel) */
        .date-bubble {
            position: absolute;
            top: 15px;
            left: 15px;
            background-color: var(--white);
            border-radius: 5px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
            font-weight: bold;
            line-height: 1.1;
        }
        .date-bubble-month {
            background-color: #d9534f; /* Roter Kopf */
            color: var(--white);
            padding: 4px 8px;
            border-radius: 5px 5px 0 0;
            font-size: 0.8em;
            text-transform: uppercase;
        }
        .date-bubble-day {
            color: var(--font-color);
            padding: 6px 8px;
            font-size: 1.6em;
        }

        /* Tags über dem Bild */
        .tile-tags {
            position: absolute;
            top: 15px;
            right: 15px;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 6px;
        }
        .tile-tags span {
            background-color: rgba(42, 115, 194, 0.9); /* Semi-transparentes Blau */
            padding: 5px 10px;
            border-radius: 4px;
            font-size: 0.85em;
        }
        
        /* Unterer Teil der Kachel (Titel, Ort, etc.) */
        .tile-body {
            background-color: var(--primary-color);
            color: var(--white);
            padding: 20px;
            flex-grow: 1; /* Sorgt dafür, dass der Body den Rest des Platzes einnimmt */
        }
        .tile-title {
            margin: 0 0 15px 0;
            font-size: 1.4em;
            line-height: 1.3;
        }
        .tile-meta p {
            margin: 5px 0;
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 0.95em;
        }
        .tile-meta svg {
            width: 18px;
            height: 18px;
            fill: var(--white);
            flex-shrink: 0; /* Verhindert, dass das Icon schrumpft */
        }

        /* Lade- & Fehlermeldungen */
        #loader, #no-events {
            text-align: center;
            padding: 40px;
            font-size: 1.2em;
            width: 100%;
        }

        /* Modal (unverändert vom Kalender) */
        .modal { display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.5); animation: fadeIn 0.3s; }
        .modal-content { background-color: var(--white); margin: 5% auto; padding: 30px; border-radius: 8px; width: 90%; max-width: 650px; position: relative; box-shadow: 0 5px 15px rgba(0,0,0,0.3); animation: slideIn 0.3s; }
        .close-button { color: #aaa; float: right; font-size: 28px; font-weight: bold; position: absolute; top: 10px; right: 20px; cursor: pointer; }
        #modal-image-container { width: 100%; margin-bottom: 20px; text-align: center; }
        #modal-image-container img { max-width: 100%; max-height: 250px; height: auto; border-radius: 8px; object-fit: cover; }
        #modal-title { margin-top: 0; color: var(--primary-color); }
        #modal-date { font-weight: 500; color: #555; margin-bottom: 20px; }
        #modal-details strong { display: inline-block; min-width: 80px; color: var(--primary-color); }
        #modal-details p { margin: 8px 0; }
        #modal-content-html { margin-top: 20px; padding-top: 20px; border-top: 1px solid var(--light-gray); }
        #modal-content-html p { line-height: 1.6; }
        #modal-tags span { display: inline-block; background-color: var(--secondary-color); color: var(--white); padding: 3px 8px; border-radius: 12px; font-size: 0.8em; margin-right: 5px; margin-bottom: 5px; }
        @keyframes fadeIn { from {opacity: 0} to {opacity: 1} }
        @keyframes slideIn { from {transform: translateY(-50px)} to {transform: translateY(0)} }
    </style>
</head>
<body>

    <h1>Aktuelle Termine</h1>
    <div id="edu-event-wall">
        <div id="loader">Lade Termine...</div>
    </div>

    <!-- Modal für Termindetails (genau wie vorher) -->
    <div id="event-modal" class="modal">
        <div class="modal-content">
            <span id="close-modal" class="close-button">×</span>
            <div id="modal-image-container"></div>
            <h2 id="modal-title"></h2>
            <p id="modal-date"></p>
            <div id="modal-details">
                <p><strong>Zusammenfassung:</strong> <span id="modal-summary"></span></p>
                <p><strong>Ort:</strong> <span id="modal-location"></span></p>
                <p><strong>Tags:</strong> <span id="modal-tags"></span></p>
            </div>
            <div id="modal-content-html"></div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const endpoint = 'https://n8n.rpi-virtuell.de/webhook/nostre_termine';
            
            const eventWallEl = document.getElementById('edu-event-wall');
            const loaderEl = document.getElementById('loader');
            const modal = document.getElementById('event-modal');
            const closeModalBtn = document.getElementById('close-modal');
            
            let allEvents = [];

            // Helper zum Formatieren des Datums für das Modal
            const formatGermanDate = (date) => {
                if (!date) return 'Keine Angabe';
                const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit', hour12: false };
                return new Intl.DateTimeFormat('de-DE', options).format(date) + ' Uhr';
            };
            
            // Daten vom Endpunkt abrufen
            const fetchEvents = async () => {
                try {
                    const response = await fetch(endpoint);
                    if (!response.ok) throw new Error(`HTTP-Fehler! Status: ${response.status}`);
                    const data = await response.json();
                    if (data && data.length > 0 && data[0].nostrfeed) {
                        allEvents = data[0].nostrfeed.map(event => ({
                            ...event,
                            start: new Date(event.starts),
                            end: new Date(event.ends)
                        })).sort((a, b) => a.start - b.start); // Termine nach Datum sortieren
                    } else {
                        allEvents = [];
                    }
                } catch (error) {
                    console.error('Fehler beim Abrufen der Termine:', error);
                    eventWallEl.innerHTML = `<div id="no-events" style="color: red;">Fehler beim Laden der Termine.</div>`;
                }
            };
            
            // Die Kachel-Ansicht rendern
            const renderEventWall = () => {
                eventWallEl.innerHTML = ''; // Leere den Container
                
                if (allEvents.length === 0) {
                    eventWallEl.innerHTML = `<div id="no-events">Aktuell keine Termine gefunden.</div>`;
                    return;
                }

                allEvents.forEach(event => {
                    const tile = document.createElement('div');
                    tile.className = 'event-tile';
                    
                    // Klick-Event hinzufügen, um das Modal zu öffnen
                    tile.addEventListener('click', () => showEventModal(event));

                    // Datum für die Bubble formatieren
                    const day = event.start.getDate();
                    const month = new Intl.DateTimeFormat('de-DE', { month: 'short' }).format(event.start);

                    // Tags aufbereiten (max. 3 anzeigen)
                    const tags = event.tags ? event.tags.split(',').map(t => t.trim()).slice(0, 3) : [];
                    const tagsHTML = tags.map(tag => `<span>${tag}</span>`).join('');

                    // SVG-Icons für Ort etc.
                    const locationIcon = `<svg viewBox="0 0 24 24"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"/></svg>`;
                    const organizerIcon = `<svg viewBox="0 0 24 24"><path d="M12 7V3H2v18h20V7H12zM6 19H4v-2h2v2zm0-4H4v-2h2v2zm0-4H4V9h2v2zm0-4H4V5h2v2zm4 12H8v-2h2v2zm0-4H8v-2h2v2zm0-4H8V9h2v2zm0-4H8V5h2v2zm10 12h-8v-2h2v-2h-2v-2h2v-2h-2V9h8v10zm-2-8h-2v2h2v-2zm0 4h-2v2h2v-2z"/></svg>`;

                    tile.innerHTML = `
                        <div class="tile-header ${event.image ? '' : 'no-image'}" style="background-image: url('${event.image || ''}')">
                            <div class="date-bubble">
                                <div class="date-bubble-month">${month}</div>
                                <div class="date-bubble-day">${day}</div>
                            </div>
                            <div class="tile-tags">${tagsHTML}</div>
                        </div>
                        <div class="tile-body">
                            <h3 class="tile-title">${event.title}</h3>
                            <div class="tile-meta">
                                ${event.summary ? `<p>${organizerIcon}<span>${event.summary}</span></p>` : ''}
                                ${event.location ? `<p>${locationIcon}<span>${event.location}</span></p>` : ''}
                            </div>
                        </div>
                    `;
                    eventWallEl.appendChild(tile);
                });
            };
            
            // Das bekannte Modal anzeigen
            const showEventModal = (event) => {
                const modalImageContainer = document.getElementById('modal-image-container');
                modalImageContainer.innerHTML = '';
                if (event.image) {
                    const img = document.createElement('img');
                    img.src = event.image;
                    img.alt = `Bild für ${event.title}`;
                    modalImageContainer.appendChild(img);
                    modalImageContainer.style.display = 'block';
                } else {
                    modalImageContainer.style.display = 'none';
                }
                
                document.getElementById('modal-title').textContent = event.title;
                document.getElementById('modal-summary').textContent = event.summary || 'Keine Zusammenfassung vorhanden.';
                document.getElementById('modal-location').innerHTML = event.location && event.location.startsWith('http') 
                    ? `<a href="${event.location}" target="_blank" rel="noopener noreferrer">${event.location}</a>` 
                    : event.location || 'Kein Ort angegeben.';
                
                const startStr = formatGermanDate(event.start);
                const endStr = new Intl.DateTimeFormat('de-DE', { hour: '2-digit', minute: '2-digit' }).format(event.end);
                document.getElementById('modal-date').textContent = `${startStr} - ${endStr} Uhr`;

                const tagsContainer = document.getElementById('modal-tags');
                tagsContainer.innerHTML = '';
                if (event.tags) {
                    event.tags.split(',').forEach(tag => {
                        const tagEl = document.createElement('span');
                        tagEl.textContent = tag.trim();
                        tagsContainer.appendChild(tagEl);
                    });
                } else {
                    tagsContainer.innerHTML = '<span>Keine</span>';
                }
                document.getElementById('modal-content-html').innerHTML = event.content;
                modal.style.display = 'block';
            };

            // Event Listener für das Schließen des Modals
            closeModalBtn.addEventListener('click', () => modal.style.display = 'none');
            window.addEventListener('click', (e) => {
                if (e.target == modal) modal.style.display = 'none';
            });

            // Initialisierungsfunktion
            const init = async () => {
                await fetchEvents();
                renderEventWall();
            };

            init();
        });
    </script>

</body>
</html>
